from graphviz import Digraph

class ABB:
    
  ##################################################################
  ##################################################################
  ## TDA privado NodoArbol
  class __NodoArbol:
    def __init__(self, dato):
      self.dato = dato
      self.izquierdo = None
      self.derecho = None
    
    def tieneIzquierdo(self):
      return self.izquierdo != None

    def tieneDerecho(self):
      return self.derecho != None

    def esHoja(self):
      return not self.tieneIzquierdo() and not self.tieneDerecho()
      
    def treePlot(self, dot):
      if self.tieneIzquierdo():
        dot.node(str(self.izquierdo.dato), str(self.izquierdo.dato))
        dot.edge(str(self.dato), str(self.izquierdo.dato))
        self.izquierdo.treePlot(dot)
      else:
        dot.node("-"+str(self.dato)+"l", "-")
        dot.edge(str(self.dato), "-"+str(self.dato)+"l")
      if self.tieneDerecho():
        dot.node(str(self.derecho.dato), str(self.derecho.dato))
        dot.edge(str(self.dato), str(self.derecho.dato))
        self.derecho.treePlot(dot)
      else:
        dot.node("-"+str(self.dato)+"r", "-")
        dot.edge(str(self.dato), "-"+str(self.dato)+"r")
  ##################################################################
  ##################################################################
    
  #####TDA ARBOL BINARIO DE BUSQUEDA

  ###Estructura de TDA ABB
  def __init__(self):
    self.raiz = None

  def estaVacio(self):
    return self.raiz == None

  def treePlot(self, fileName='arbol'):
    if not self.estaVacio():
      treeDot = Digraph()
      treeDot.node(str(self.raiz.dato), str(self.raiz.dato))
      self.raiz.treePlot(treeDot)
      treeDot.render(fileName, view=True)


## Insercion

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def insertar(self, nodoNuevo):
      if nodoNuevo.dato < self.dato:
        if self.tieneIzquierdo():
          self.izquierdo.insertar(nodoNuevo)
        else:
          self.izquierdo = nodoNuevo
      elif nodoNuevo.dato > self.dato:
        if self.tieneDerecho():
          self.derecho.insertar(nodoNuevo)
        else:
          self.derecho = nodoNuevo
      else:
        raise Exception("El dato %s ya existe en el ABB" % (nodoNuevo.dato))
    
    #suma el dato de cada hoja
    def sumarHojas(self):
      if self.esHoja():
        suma= self.dato
      elif self.tieneIzquierdo() and self.tieneDerecho():
        suma= self.izquierdo.sumarHojas() + self.derecho.sumarHojas()
      elif self.tieneIzquierdo():
        suma= self.izquierdo.sumarHojas()
      elif self.tieneDerecho():
        suma= self.derecho.sumarHojas()
      return suma

    #cantidad de Hojas del arbol
    def cantHojas(self):
      if self.esHoja():
        suma = 1
      elif self.tieneIzquierdo() and self.tieneDerecho():
        suma= self.izquierdo.cantHojas() + self.derecho.cantHojas()
      elif self.tieneIzquierdo():
        suma= self.izquierdo.cantHojas()
      elif self.tieneDerecho():
        suma= self.derecho.cantHojas()
      return suma

    # suma la totalidad del arbol
    def sumarArbol(self):
      if self.esHoja():
        suma = self.dato
      elif self.tieneIzquierdo() and self.tieneDerecho():
        suma= self.dato +self.izquierdo.sumarArbol() + self.derecho.sumarArbol()
      elif self.tieneIzquierdo():
        suma= self.dato + self.izquierdo.sumarArbol()
      elif self.tieneDerecho():
        suma= self.dato + self.derecho.sumarArbol()
      return suma

    #devuelve el peso del arbol
    def peso(self):
      if self.esHoja():
        suma = 1
      elif self.tieneIzquierdo() and self.tieneDerecho():
        suma= 1 +self.izquierdo.peso() + self.derecho.peso()
      elif self.tieneIzquierdo():
        suma= 1 + self.izquierdo.peso()
      elif self.tieneDerecho():
        suma= 1+ self.derecho.peso()
      return suma
    
    #calcula el maximo del arbol
    def maximo(self):
      if self.esHoja():
        maximo = self.dato
      elif self.tieneDerecho():
        maximo = self.derecho.maximo()
      return maximo

    #calcula el minimo del arbol
    def minimo(self):
      if self.esHoja():
        minimo = self.dato
      elif self.tieneIzquierdo():
        minimo = self.izquierdo.minimo()
      return minimo
      
    #busca un dato en el arbol True = si encuentra
    def seEncuentra(self,dato):
      if self.dato == dato:
        return True
      elif dato < self.dato:
        if self.tieneIzquierdo():
          return self.izquierdo.seEncuentra(dato)
        else:
          return False
      elif dato > self.dato:
        if self.tieneDerecho():
          return self.derecho.seEncuentra(dato)
        else:
          return False
      

  def insertar(self, dato):
    nuevo = ABB.__NodoArbol(dato)
    if self.estaVacio():
      self.raiz = nuevo
    else:
      self.raiz.insertar(nuevo)

  def sumarHojas(self):
    if not self.estaVacio():
      return self.raiz.sumarHojas()
  
  def cantHojas(self):
    if not self.estaVacio():
      return self.raiz.cantHojas()

  def sumarArbol(self):
    if not self.estaVacio():
      return self.raiz.sumarArbol()
  def peso(self):
    if not self.estaVacio():
      return self.raiz.peso()
  def promedio(self, completo = True):
    promedio = 0
    if not self.estaVacio():
      if completo:
        promedio =  self.raiz.sumarArbol() / self.raiz.peso()
      else:
        promedio = self.raiz.sumarHojas() / self.raiz.cantHojas()
    return promedio

  def maximo(self):
    if not self.estaVacio():
      return self.raiz.maximo()
      
  def minimo(self):
    if not self.estaVacio():
      return self.raiz.minimo()

  def seEncuentra(self,dato):
    if not self.estaVacio():
      return self.raiz.seEncuentra(dato)
arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

#arbol.promedio(False)
#arbol.sumarHojas()
#arbol.cantHojas()
#arbol.sumarArbol()
#arbol.treePlot()
#arbol.maximo()
#arbol.minimo()
#arbol.seEncuentra(150)


## Recorrido pre orden

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def preOrden(self):
      print(self.dato)
      if self.tieneIzquierdo():
        self.izquierdo.preOrden()
      if self.tieneDerecho():
        self.derecho.preOrden()
  
  def preOrden(self):
    if not self.estaVacio():
      self.raiz.preOrden()

arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

arbol.preOrden()

## Recorrido in orden primero a izquierda y despues a derecha (MENOR MAYOR)

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def inOrdenID(self):
      if self.tieneIzquierdo():
        self.izquierdo.inOrdenID()
      print(self.dato)
      if self.tieneDerecho():
        self.derecho.inOrdenID()
  
  def inOrdenID(self):
    if not self.estaVacio():
      self.raiz.inOrdenID()

arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

arbol.inOrdenID()

## Recorrido in orden primero a derecha y despues a izquierda (MAYOR MENOR)

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def inOrdenDI(self):
      if self.tieneDerecho():
        self.derecho.inOrdenDI()
      print(self.dato)
      if self.tieneIzquierdo():
        self.izquierdo.inOrdenDI()
      
  def inOrdenDI(self):
    if not self.estaVacio():
      self.raiz.inOrdenDI()

arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

arbol.inOrdenDI()


## Recorrido post orden

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def postOrden(self):
      if self.tieneIzquierdo():
        self.izquierdo.postOrden()
      if self.tieneDerecho():
        self.derecho.postOrden()
      print(self.dato)
  
  def postOrden(self):
    if not self.estaVacio():
      self.raiz.postOrden()

arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

arbol.postOrden()

## Profundidad de elemento

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def profundidadElemento(self, dato, nivelAct = 0):
      res = None
      if dato == self.dato:
        res = nivelAct
      elif dato < self.dato:
        if self.tieneIzquierdo():
          res = self.izquierdo.profundidadElemento(dato, nivelAct+1)
      else:
        if self.tieneDerecho():
          res = self.derecho.profundidadElemento(dato, nivelAct+1)
      return res
  
  def profundidadElemento(self, dato):
    if not self.estaVacio():
      return self.raiz.profundidadElemento(dato)

arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75);arbol.insertar(150);

print(arbol.profundidadElemento(450))

## Maximo de un arbol

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def maximo(self):
      maximo = self.dato
      if self.tieneDerecho():
        maximo = self.derecho.maximo()
      return maximo
  
    def predecesor(self):
      pred = None
      if self.tieneIzquierdo():
        pred = self.izquierdo.maximo()
      return pred

  def maximo(self):
    maximo = None
    if not self.estaVacio():
      return self.raiz.maximo()

## Minimo de un arbol

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def minimo(self):
      minimo = self.dato
      if self.tieneIzquierdo():
        minimo = self.izquierdo.minimo()
      return minimo

    def sucesor(self):
      suc = None
      if self.tieneDerecho():
        suc = self.derecho.minimo()
      return suc

  def minimo(self):
    minimo = None
    if not self.estaVacio():
      return self.raiz.minimo()


## Grado de un nodo

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def grado(self):
      grado = 0
      if self.tieneIzquierdo():
        grado += 1
      if self.tieneDerecho():
        grado += 1
      return grado
      


## Eliminar elemento opcion 1 ####
## Tres casos separados: 0 Hijos (Base) / 1 Hijo (Base) / 2 Hijos (Recursivo)

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def eliminarElemento(self, dato):
      if dato < self.dato:
        if self.tieneIzquierdo():
          if self.izquierdo.dato == dato:
            ##El nodo a eliminar tiene 2 hijos
            if self.izquierdo.grado() == 2:
              pred = self.izquierdo.predecesor()
              self.izquierdo.eliminarElemento(pred)
              self.izquierdo.dato = pred
            ##El nodo a eliminar tiene solo hijo izquierdo
            elif self.izquierdo.tieneIzquierdo():
              self.izquierdo = self.izquierdo.izquierdo
            ##El nodo a eliminar tiene solo hijo derecho
            elif self.izquierdo.tieneDerecho():
              self.izquierdo = self.izquierdo.derecho
            ##El nodo a eliminar es una hoja
            else:
              self.izquierdo = None
          else:
            self.izquierdo.eliminarElemento(dato)

      elif dato > self.dato:
        if self.tieneDerecho():
          if self.derecho.dato == dato:
            if self.derecho.grado() == 2:
              pred = self.derecho.predecesor()
              self.derecho.eliminarElemento(pred)
              self.derecho.dato = pred
            elif self.derecho.tieneIzquierdo():
              self.derecho = self.derecho.izquierdo
            elif self.derecho.tieneDerecho():
              self.derecho = self.derecho.derecho
            else:
              self.derecho = None
          else:
            self.derecho.eliminarElemento(dato)
  
  def eliminarElemento(self, dato):
    if not self.estaVacio():
      if self.raiz.dato == dato:
        if self.raiz.grado() == 2:
          pred = self.raiz.izquierdo.maximo()
          self.raiz.dato = pred
          self.raiz.izquierdo.eliminarElemento(pred)
        elif self.raiz.tieneIzquierdo():
          self.raiz = self.raiz.izquierdo
        elif self.raiz.tieneDerecho():
          self.raiz = self.raiz.derecho
        else:
          self.raiz = None
      else:
        self.raiz.eliminarElemento(dato)
      
arbol = ABB()

arbol.insertar(50);
arbol.insertar(30);arbol.insertar(20);arbol.insertar(40);arbol.insertar(10);arbol.insertar(25);arbol.insertar(35);arbol.insertar(45);
arbol.insertar(70);arbol.insertar(60);arbol.insertar(80);arbol.insertar(55);arbol.insertar(65);arbol.insertar(75)

arbol.treePlot()

arbol.eliminarElemento(30)

arbol.treePlot("borrado")


## clonar un arbol

class ABB(ABB):

  class __NodoArbol(ABB.__NodoArbol):
    def clonar(self, arbolNuevo):
      arbolNuevo.insertar(self.dato)
      if self.tieneIzquierdo():
        self.izquierdo.clonar(arbolNuevo)
      if self.tieneDerecho():
        self.derecho.clonar(arbolNuevo)

  def clonar(self):
    arbolNuevo = None
    if not self.estaVacio():
      return self.raiz.clonar(arbolNuevo)
